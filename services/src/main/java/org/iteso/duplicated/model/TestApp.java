/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.iteso.duplicated.model;

import java.util.Set;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.TokenStream;
import org.iteso.duplicated.model.CloneDetector.ClonePair;
import org.iteso.duplicated.antlr.Java8Lexer;
import org.iteso.duplicated.antlr.Java8Parser;

public class TestApp {

  public String getGreeting() {
    return "Hello world.";
  }

  public static void main(String[] args) {
    /**
     * 1. Clones=âˆ…
     * 2.For each subtree i:
     *  If mass(i)>=MassThresholdThen
     *    hash i to bucket
     * 3. For each subtree i and j in the same bucket
     *  If CompareTree(i,j) > SimilarityThreshold
     *    Then {
     *       For each subtree s of i
     *        If IsMember(Clones,s)
     *          Then RemoveClonePair(Clones,s)
     *       For each subtree s of j
     *          If IsMember(Clones,s)
     *            Then RemoveClonePair(Clones,s)
     *       AddClonePair(Clones,i,j)
     *    }
     */
    CharStream input = CharStreams
        .fromString("c");
    Java8Lexer lexer = new Java8Lexer(input);
    TokenStream tokens = new CommonTokenStream(lexer);
    Java8Parser parser = new Java8Parser(tokens);
    Java8Parser.MethodBodyContext cst = parser.methodBody();
    CharStream input2 = CharStreams
        .fromString("{ int y = 6;\n return 5 + y; if(true) {} if(true)}");
    Java8Lexer lexer2 = new Java8Lexer(input2);
    TokenStream tokens2 = new CommonTokenStream(lexer2);
    Java8Parser parser2 = new Java8Parser(tokens2);
    Java8Parser.MethodBodyContext cst2 = parser2.methodBody();
    //System.out.println(Trees.toStringTree(cst, parser));
    //System.out.println("--------");
    CloneDetector detector = new CloneDetector(cst, cst2);
    Set<ClonePair> clones = detector.getClones();
    System.out.println(clones);
  }

}